# from math import sqrt

manhattan_dist = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6],
    [1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5],
    [2, 1, 0, 1, 3, 2, 1, 2, 4, 3, 2, 3, 5, 4, 3, 4],
    [3, 2, 1, 0, 4, 3, 2, 1, 5, 4, 3, 2, 6, 5, 4, 3],
    [1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5],
    [2, 1, 2, 3, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4],
    [3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 1, 2, 4, 3, 2, 3],
    [4, 3, 2, 1, 3, 2, 1, 0, 4, 3, 2, 1, 5, 4, 3, 2],
    [2, 3, 4, 5, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 4],
    [3, 2, 3, 4, 2, 1, 2, 3, 1, 0, 1, 2, 2, 1, 2, 3],
    [4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 1, 2],
    [5, 4, 3, 2, 4, 3, 2, 1, 3, 2, 1, 0, 4, 3, 2, 1],
    [3, 4, 5, 6, 2, 3, 4, 5, 1, 2, 3, 4, 0, 1, 2, 3],
    [4, 3, 4, 5, 3, 2, 3, 4, 2, 1, 2, 3, 1, 0, 1, 2],
    [5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1]
]  # row: num-1   col: index

euclidean_dist = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4],
    [1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3],
    [2, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
    [3, 2, 1, 0, 3, 2, 1, 1, 3, 2, 2, 2, 4, 3, 3, 3],
    [1, 1, 2, 3, 0, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3],
    [1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2],
    [2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2],
    [3, 2, 1, 1, 3, 2, 1, 0, 3, 2, 1, 1, 3, 2, 2, 2],
    [2, 2, 2, 3, 1, 1, 2, 3, 0, 1, 2, 3, 1, 1, 2, 3],
    [2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2],
    [2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1],
    [3, 2, 2, 2, 3, 2, 1, 1, 3, 2, 1, 0, 3, 2, 1, 1],
    [3, 3, 3, 4, 2, 2, 2, 3, 1, 1, 2, 3, 0, 1, 2, 3],
    [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2],
    [3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1]
]


chebyshev_dist = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3],
    [1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3],
    [2, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
    [3, 2, 1, 0, 3, 2, 1, 1, 3, 2, 2, 2, 3, 3, 3, 3],
    [1, 1, 2, 3, 0, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3],
    [1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2],
    [2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2],
    [3, 2, 1, 1, 3, 2, 1, 0, 3, 2, 1, 1, 3, 2, 2, 2],
    [2, 2, 2, 3, 1, 1, 2, 3, 0, 1, 2, 3, 1, 1, 2, 3],
    [2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2],
    [2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1],
    [3, 2, 2, 2, 3, 2, 1, 1, 3, 2, 1, 0, 3, 2, 1, 1],
    [3, 3, 3, 3, 2, 2, 2, 3, 1, 1, 2, 3, 0, 1, 2, 3],
    [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2],
    [3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 1]
]


# different_dist = [
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]
# ]


# 启发式函数
# 曼哈顿距离
# def hf_manhattan(index: int, num: int):
#     if num == 0:
#         return 0
#     r, c = divmod(index, 4)
#     nr, nc = divmod(num-1, 4)
#     return abs(r-nr) + abs(c - nc)
#
#
# # 欧几里得距离
# def hf_euclidean(index: int, num: int):
#     if num == 0:
#         return 0
#     r, c = divmod(index, 4)
#     nr, nc = divmod(num-1, 4)
#     return int(sqrt((r-nr)**2 + (c-nc)**2))
#
#
# # 切比雪夫距离
# def hf_chebyshev(index: int, num: int):
#     if num == 0:
#         return 0
#     r, c = divmod(index, 4)
#     nr, nc = divmod(num-1, 4)
#     return max(abs(r-nr), abs(c-nc))


# # 不在原位的数字个数
# def hf_different(index: int, num: int):
#     return 0 if num == 0 else index == num-1

# def get_all_hf_value():
#     # 得到不同的启发函数的所有的 num-index 的值
#     for i in range(16):
#         string = "["
#         for j in range(16):
#             string += str(hf_chebyshev(j, i))
#             if j != 15:
#                 string += ", "
#         string += "],"
#         print(string)
#
#
# if __name__ == '__main__':
#     get_all_hf_value()
